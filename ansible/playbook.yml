# Nombre del playbook
- name: Desplegar infraestructura y aplicaciones en Azure
  hosts: all
  vars:
    acr_name: "myAcrRegistryAlfonso"        # Nombre del registro de contenedores de Azure (ACR)
    aks_name: "myAksCluster"         # Nombre del cluster de Kubernetes (AKS)
    acr_admin_username: "*****"  # Nombre de usuario admin para ACR
    acr_admin_password: "*****"  # Contraseña admin para ACR

  tasks:
    # Sección de tareas para la VM
    - name: Instalar dependencias en VM
      hosts: vm
      become: yes   # Ejecutar las tareas como superusuario
      tasks:
        # Actualizar la lista de paquetes en la VM
        - name: Actualizar lista de paquetes
          apt:
            update_cache: yes

        # Instalar Podman y htpasswd en la VM
        - name: Instalar Podman y htpasswd
          apt:
            name: 
              - podman           # Podman para gestión de contenedores
              - apache2-utils    # htpasswd para autenticación
            state: present

        # Crear y ejecutar un contenedor de servidor web con Podman
        - name: Crear contenedor de servidor web
          shell: |
            podman run -d --name web_server -p 80:80 -v /var/www/html:/usr/share/nginx/html:ro nginx

        # Configurar autenticación básica para el servidor web
        - name: Configurar autenticación básica
          shell: |
            htpasswd -bc /etc/nginx/.htpasswd myuser mypassword
            podman exec -it web_server /bin/sh -c 'echo "auth_basic 'Restricted'; auth_basic_user_file /etc/nginx/.htpasswd;" > /etc/nginx/conf.d/default.conf'

        # Configurar el contenedor para que se ejecute como un servicio del sistema
        - name: Configurar contenedor como servicio
          shell: |
            podman generate systemd --new --name web_server > /etc/systemd/system/podman-web_server.service
            systemctl daemon-reload
            systemctl enable podman-web_server
            systemctl start podman-web_server

    # Sección de tareas para el AKS
    - name: Desplegar aplicación en AKS
      hosts: aks
      tasks:
        # Instalar la CLI de Azure en el host local (AKS)
        - name: Instalar Azure CLI
          shell: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

        # Iniciar sesión en Azure usando las credenciales de entorno
        - name: Iniciar sesión en Azure
          azure.azcollection.azure_rm:
            client_id: "{{ lookup('env','ARM_CLIENT_ID') }}"
            secret: "{{ lookup('env','ARM_CLIENT_SECRET') }}"
            tenant: "{{ lookup('env','ARM_TENANT_ID') }}"
            subscription_id: "{{ lookup('env','ARM_SUBSCRIPTION_ID') }}"

        # Configurar kubectl para interactuar con el cluster AKS
        - name: Configurar kubectl para AKS
          shell: |
            az aks get-credentials --resource-group myResourceGroup --name myAksCluster

        # Crear un despliegue de aplicación en AKS
        - name: Crear despliegue de aplicación en AKS
          k8s:
            definition: 
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: myapp
                namespace: default
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: myapp
                template:
                  metadata:
                    labels:
                      app: myapp
                  spec:
                    containers:
                    - name: myapp
                      image: myacrregistry.azurecr.io/myapp:casopractico2
                      ports:
                      - containerPort: 80

        # Crear un servicio de LoadBalancer para la aplicación en AKS
        - name: Crear servicio para la aplicación en AKS
          k8s:
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: myapp-service
                namespace: default
              spec:
                type: LoadBalancer
                ports:
                - port: 80
                  targetPort: 80
                selector:
                  app: myapp
